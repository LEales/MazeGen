package model.Maps;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class World6MapsTest {
    World6Maps w;

    @BeforeEach
    void init() {
        w = new World6Maps();
    }

    @Test
    void level61pos() {
        int[][] level61 = {{3, 7, 1, 1, 1, 0, 1, 1, 0, 1, 1, 4, 1, 1, 1, 4, 1, 1},
                {0, 0, 0, 0, 1, 0, 0, 1, 4, 1, 0, 0, 0, 0, 0, 1, 0, 1},
                {4, 0, 4, 0, 4, 1, 0, 0, 1, 0, 0, 1, 4, 1, 0, 1, 0, 4},
                {1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1},
                {1, 0, 1, 1, 0, 4, 0, 1, 0, 0, 1, 4, 0, 0, 0, 1, 1, 0},
                {1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 4, 1},
                {0, 0, 0, 1, 0, 1, 0, 4, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1},
                {1, 1, 4, 1, 0, 1, 1, 0, 0, 1, 0, 1, 4, 1, 1, 1, 0, 1},
                {1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 4},
                {1, 0, 7, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1},
                {1, 0, 4, 0, 0, 0, 0, 0, 4, 1, 1, 0, 0, 0, 4, 1, 0, 1},
                {4, 1, 1, 0, 1, 0, 4, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1},
                {1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 1, 0, 1, 4, 1},
                {1, 0, 1, 1, 1, 0, 1, 0, 1, 4, 1, 0, 0, 1, 0, 0, 1, 0},
                {4, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 4},
                {0, 0, 0, 1, 1, 4, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1},
                {1, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2}};
        int[][] level61Get = w.getLevel61();
        boolean equal = true;
        for (int i = 0; i < level61.length; i++) {
            for (int j = 0; j < level61[i].length; j++) {
                if (level61Get[i][j] != level61[i][j]) {
                    equal = false;
                    break;
                }
            }
        }
        assertTrue(equal);
    }

    @Test
    void level61neg() {
        int[][] level61 = {{3, 7, 1, 1, 1, 0, 1, 1, 0, 1, 1, 4, 1, 1, 1, 4, 1, 1},
                {0, 0, 0, 0, 1, 0, 0, 1, 4, 1, 0, 0, 0, 0, 0, 1, 0, 1},
                {4, 0, 4, 0, 4, 1, 0, 0, 1, 0, 0, 1, 4, 1, 0, 1, 0, 4},
                {1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1},
                {1, 0, 1, 1, 0, 4, 0, 1, 0, 0, 1, 4, 0, 0, 0, 1, 1, 0},
                {1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 4, 1},
                {0, 0, 0, 1, 0, 1, 0, 4, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1},
                {1, 1, 4, 1, 0, 1, 1, 0, 0, 1, 0, 1, 4, 1, 1, 1, 0, 1},
                {1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 4},
                {1, 0, 7, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1},
                {1, 0, 4, 0, 0, 0, 0, 0, 4, 1, 1, 0, 0, 0, 4, 1, 0, 1},
                {4, 1, 1, 0, 1, 0, 4, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1},
                {1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 1, 0, 1, 4, 1},
                {1, 0, 1, 1, 1, 0, 1, 0, 1, 4, 1, 0, 0, 1, 0, 0, 1, 0},
                {4, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 4},
                {0, 0, 0, 1, 1, 4, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1},
                {1, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2}};
        int[][] level1Get = w.getLevel61();
        boolean equal = true;
        for (int i = 0; i < level61.length; i++) {
            for (int j = 0; j < level61[i].length; j++) {
                if (level1Get[i][j] != level61[i][j]) {
                    equal = false;
                    break;
                }
            }
        }
        assertFalse(equal);
    }

    @Test
    void level62pos() {
        int[][] level62 = {{2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 4, 1, 1, 4, 1, 1, 1, 7},
                {1, 1, 1, 1, 4, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 4, 1},
                {1, 4, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 4},
                {1, 7, 1, 4, 1, 1, 1, 4, 0, 1, 1, 1, 0, 4, 1, 1, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1},
                {1, 0, 1, 1, 1, 4, 1, 0, 1, 1, 4, 1, 1, 0, 0, 1, 0, 1},
                {1, 0, 1, 0, 0, 0, 1, 1, 4, 0, 0, 0, 1, 0, 1, 1, 1, 1},
                {4, 0, 1, 0, 4, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0},
                {1, 0, 1, 4, 1, 0, 0, 4, 1, 1, 4, 0, 1, 0, 1, 1, 4, 1},
                {1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0},
                {1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 4},
                {0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 1, 0},
                {0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0},
                {0, 1, 1, 1, 4, 1, 0, 1, 4, 0, 0, 0, 1, 0, 1, 4, 1, 1},
                {0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 4, 1, 0, 1, 1, 1, 1},
                {0, 1, 1, 1, 4, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1},
                {0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 4, 1, 1, 1, 1, 4, 4, 3}};
        int[][] level6Get = w.getLevel62();
        boolean equal = true;
        for (int i = 0; i < level62.length; i++) {
            for (int j = 0; j < level62[i].length; j++) {
                if (level6Get[i][j] != level62[i][j]) {
                    equal = false;
                    break;
                }
            }
        }
        assertTrue(equal);
    }

    @Test
    void level62neg() {
        int[][] level62 = {{2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 4, 1, 1, 4, 1, 1, 1, 7},
                {1, 1, 1, 1, 4, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 4, 1},
                {1, 4, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 4},
                {1, 7, 1, 4, 1, 1, 1, 4, 0, 1, 1, 1, 0, 4, 1, 1, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1},
                {1, 0, 1, 1, 1, 4, 1, 0, 1, 1, 4, 1, 1, 0, 0, 1, 0, 1},
                {1, 0, 1, 0, 0, 0, 1, 1, 4, 0, 0, 0, 1, 0, 1, 1, 1, 1},
                {4, 0, 1, 0, 4, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0},
                {1, 0, 1, 4, 1, 0, 0, 4, 1, 1, 4, 0, 1, 0, 1, 1, 4, 1},
                {1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0},
                {1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 4},
                {0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 1, 0},
                {0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0},
                {0, 1, 1, 1, 4, 1, 0, 1, 4, 0, 0, 0, 1, 0, 1, 4, 1, 1},
                {0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 4, 1, 0, 1, 1, 1, 1},
                {0, 1, 1, 1, 4, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1},
                {0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 4, 1, 1, 1, 4, 4, 4, 3}};
        int[][] level6Get = w.getLevel62();
        boolean equal = true;
        for (int i = 0; i < level62.length; i++) {
            for (int j = 0; j < level62[i].length; j++) {
                if (level6Get[i][j] != level62[i][j]) {
                    equal = false;
                    break;
                }
            }
        }
        assertFalse(equal);
    }

    @Test
    void level63pos() {
        int[][] level63 = {{3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, 1, 0, 1, 0, 4},
                {1, 1, 4, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 4, 4, 4, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, 4, 0, 1, 0, 4, 0, 1},
                {1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 7},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2}};
        int[][] level6Get = w.getLevel63();
        boolean equal = true;
        for (int i = 0; i < level63.length; i++) {
            for (int j = 0; j < level63[i].length; j++) {
                if (level6Get[i][j] != level63[i][j]) {
                    equal = false;
                    break;
                }
            }
        }
        assertTrue(equal);
    }

    @Test
    void level63neg() {
        int[][] level63 = {{3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, 1, 0, 1, 0, 4},
                {1, 1, 4, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 4, 4, 4, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, 4, 0, 1, 0, 4, 0, 1},
                {1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 7},
                {0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2}};
        int[][] level6Get = w.getLevel63();
        boolean equal = true;
        for (int i = 0; i < level63.length; i++) {
            for (int j = 0; j < level63[i].length; j++) {
                if (level6Get[i][j] != level63[i][j]) {
                    equal = false;
                    break;
                }
            }
        }
        assertFalse(equal);
    }

    @Test
    void level64pos() {
        int[][] level64 = {{2, 0, 1, 0, 0, 0, 0, 1, 1, 4, 1, 0, 4, 1, 4, 0, 1, 3},
                {1, 0, 4, 1, 1, 4, 1, 1, 0, 0, 0, 1, 4, 0, 1, 1, 1, 0},
                {1, 0, 0, 0, 0, 1, 0, 1, 4, 1, 1, 4, 0, 0, 0, 0, 1, 0},
                {1, 1, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 4},
                {0, 0, 1, 0, 1, 0, 0, 1, 1, 4, 1, 1, 1, 1, 1, 0, 0, 1},
                {1, 1, 4, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1},
                {1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 4, 1, 0, 4, 0},
                {4, 0, 1, 4, 1, 1, 0, 1, 0, 4, 1, 0, 1, 1, 0, 0, 1, 0},
                {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1},
                {4, 0, 1, 4, 1, 1, 0, 0, 1, 1, 4, 0, 1, 1, 1, 0, 0, 4},
                {1, 0, 1, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1},
                {4, 0, 1, 4, 0, 1, 1, 0, 0, 0, 0, 1, 4, 1, 0, 4, 1, 0},
                {1, 0, 0, 1, 1, 4, 0, 4, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0},
                {4, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0},
                {1, 0, 1, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0},
                {4, 0, 4, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 4, 0, 0, 4, 1},
                {1, 0, 1, 0, 1, 0, 4, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 4},
                {1, 1, 1, 0, 4, 1, 1, 4, 1, 4, 0, 0, 1, 4, 1, 1, 1, 1}};
        int[][] level6Get = w.getLevel64();
        boolean equal = true;
        for (int i = 0; i < level64.length; i++) {
            for (int j = 0; j < level64[i].length; j++) {
                if (level6Get[i][j] != level64[i][j]) {
                    equal = false;
                    break;
                }
            }
        }
        assertTrue(equal);
    }

    @Test
    void level64neg() {
        int[][] level64 = {{2, 0, 1, 0, 0, 0, 0, 1, 1, 4, 1, 0, 4, 1, 4, 0, 1, 3},
                {1, 0, 4, 1, 1, 4, 1, 1, 0, 0, 0, 1, 4, 0, 1, 1, 1, 0},
                {1, 0, 0, 0, 0, 1, 0, 1, 4, 1, 1, 4, 0, 0, 0, 0, 1, 0},
                {1, 1, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 4},
                {0, 0, 1, 0, 1, 0, 0, 1, 1, 4, 1, 1, 1, 1, 1, 0, 0, 1},
                {1, 1, 4, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1},
                {1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 4, 1, 0, 4, 0},
                {4, 0, 1, 4, 1, 1, 0, 1, 0, 4, 1, 0, 1, 1, 0, 0, 1, 0},
                {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1},
                {4, 0, 1, 4, 1, 1, 0, 0, 1, 1, 4, 0, 1, 1, 1, 0, 0, 4},
                {1, 0, 1, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1},
                {4, 0, 1, 4, 0, 1, 1, 0, 0, 0, 0, 1, 4, 1, 0, 4, 1, 0},
                {1, 0, 0, 1, 1, 4, 0, 4, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0},
                {4, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0},
                {1, 0, 1, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0},
                {4, 0, 4, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 4, 0, 0, 4, 1},
                {1, 0, 1, 0, 1, 0, 4, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 4},
                {1, 1, 1, 0, 4, 1, 1, 4, 1, 4, 0, 0, 1, 4, 1, 1, 1, 4}};
        int[][] level6Get = w.getLevel64();
        boolean equal = true;
        for (int i = 0; i < level64.length; i++) {
            for (int j = 0; j < level64[i].length; j++) {
                if (level6Get[i][j] != level64[i][j]) {
                    equal = false;
                    break;
                }
            }
        }
        assertFalse(equal);
    }

    @Test
    void level65pos() {
        int[][] level65 = {{1, 1, 1, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 1, 1, 0, 1, 2},
                {4, 0, 1, 1, 4, 0, 1, 1, 1, 0, 1, 4, 1, 0, 4, 1, 1, 0},
                {1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 0, 1, 0, 1, 4, 1, 0, 1, 1, 4, 0, 1, 4, 1, 0, 0},
                {1, 1, 0, 1, 4, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0},
                {1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0},
                {1, 1, 0, 1, 1, 0, 1, 1, 1, 4, 1, 1, 1, 0, 0, 0, 1, 0},
                {0, 4, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 1, 0, 4, 1, 0},
                {1, 1, 0, 1, 1, 0, 1, 1, 4, 3, 0, 0, 1, 0, 0, 1, 0, 0},
                {1, 0, 0, 1, 0, 0, 1, 1, 4, 4, 0, 0, 1, 1, 0, 1, 4, 0},
                {4, 1, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0},
                {0, 1, 0, 0, 1, 0, 1, 4, 1, 0, 4, 1, 1, 1, 0, 4, 1, 0},
                {1, 4, 0, 1, 4, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0},
                {4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
                {0, 4, 0, 1, 4, 1, 0, 1, 1, 4, 0, 1, 4, 1, 0, 1, 1, 0},
                {0, 1, 4, 1, 0, 1, 1, 4, 0, 1, 1, 1, 0, 1, 4, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
        int[][] level6Get = w.getLevel65();
        boolean equal = true;
        for (int i = 0; i < level65.length; i++) {
            for (int j = 0; j < level65[i].length; j++) {
                if (level6Get[i][j] != level65[i][j]) {
                    equal = false;
                    break;
                }
            }
        }
        assertTrue(equal);
    }

    @Test
    void level65neg() {
        int[][] level65 = {{1, 1, 1, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 1, 1, 0, 1, 2},
                {4, 0, 1, 1, 4, 0, 1, 1, 1, 0, 1, 4, 1, 0, 4, 1, 1, 0},
                {1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 0, 1, 0, 1, 4, 1, 0, 1, 1, 4, 0, 1, 4, 1, 0, 0},
                {1, 1, 0, 1, 4, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0},
                {1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0},
                {1, 1, 0, 1, 1, 0, 1, 1, 1, 4, 1, 1, 1, 0, 0, 0, 1, 0},
                {0, 4, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 1, 0, 4, 1, 0},
                {1, 1, 0, 1, 1, 0, 1, 1, 4, 3, 0, 0, 1, 0, 0, 1, 0, 0},
                {1, 0, 0, 1, 0, 0, 1, 1, 4, 4, 0, 0, 1, 1, 0, 1, 4, 0},
                {4, 1, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0},
                {0, 1, 0, 0, 1, 0, 1, 4, 1, 0, 4, 1, 1, 1, 0, 4, 1, 0},
                {1, 4, 0, 1, 4, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0},
                {4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
                {0, 4, 0, 1, 4, 1, 0, 1, 1, 4, 0, 1, 4, 1, 0, 1, 1, 0},
                {0, 1, 4, 1, 0, 1, 1, 4, 0, 1, 1, 1, 0, 1, 4, 1, 0, 0},
                {0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
        int[][] level6Get = w.getLevel65();
        boolean equal = true;
        for (int i = 0; i < level65.length; i++) {
            for (int j = 0; j < level65[i].length; j++) {
                if (level6Get[i][j] != level65[i][j]) {
                    equal = false;
                    break;
                }
            }
        }
        assertFalse(equal);
    }
}